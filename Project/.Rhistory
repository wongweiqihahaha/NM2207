styler:::style_selection()
say_hello_to <- function(name) {
print(paste0("Hello ", name, "!"))
}
say_hello_to('Wei Qi')
print(say_hello_to('Wei Qi'))
say_hello_to <- function(name) {
print(paste0("Hello ", name, "!"))
}
print(say_hello_to('Wei Qi'))
typeof(say_hello_to)
typeof(say_hello_to)
typeof(sum)
calc_sample_mean <- function('sample_mean')
calc_sample_mean <- function(sample_mean)
{
mean(rnorm(100))
return(sample_mean)
}
calc_sample_mean <- function(sample_mean)
{
mean(rnorm(sample_mean))
return(sample_mean)
}
calc_sample_mean <- function(sample_mean)
{
mean(rnorm(sample_mean))
return(sample_mean)
}
styler:::style_selection()
calc_sample_mean <- function(sample_mean) {
mean(rnorm(sample_mean))
return(sample_mean)
}
calc_sample_mean <- function(sample_mean) {
mean(rnorm(sample_mean))
}
return(sample_mean)
calc_sample_mean <- function(sample_mean) {
mean(rnorm(sample_mean))
}
styler:::style_selection()
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
```
### 6. Test your function (Slide #22)
calc_sample_mean(100)
calc_sample_mean(100)
```
calc_sample_mean(100)
#using rowwise groups the data by row, # allowing calc_sample_mean sample_tibble %>% group_by(sample_sizes) %>% mutate(sample_means =
calc_sample_mean(sample_sizes))
#using rowwise groups the data by row, # allowing calc_sample_mean
sample_tibble %>% group_by(sample_sizes) %>% mutate(sample_means =
calc_sample_mean(sample_sizes))
styler:::set_style_transformers()
styler:::style_selection()
# using rowwise groups the data by row, # allowing calc_sample_mean
sample_tibble %>%
group_by(sample_sizes) %>%
mutate(
sample_means =
calc_sample_mean(sample_sizes)
)
# creating a vector to test our function
sample_tibble <- tibble(
sample_sizes =
c(100, 300, 3000)
)
# using rowwise groups the data by row, # allowing calc_sample_mean
sample_tibble %>%
group_by(sample_sizes) %>%
mutate(
sample_means =
calc_sample_mean(sample_sizes)
)
# creating a vector to test our function
sample_tibble <- tibble(
sample_sizes =
c(100, 300, 3000)
)
library(tidyverse)
# creating a vector to test our function
sample_tibble <- tibble(
sample_sizes =
c(100, 300, 3000)
)
# using rowwise groups the data by row, # allowing calc_sample_mean
sample_tibble %>%
group_by(sample_sizes) %>%
mutate(
sample_means =
calc_sample_mean(sample_sizes)
)
calcu_sample_mean(100)
calc_sample_mean(100)
styler:::style_selection()
calc_sample_mean(200)
styler:::style_selection()
rlang::last_trace()
# set error=TRUE to see the error message in the output
calc_sample_mean(our_mean = 5)
styler:::style_selection()
add_two <- function(x) {
x + 2
}
add_two(4)
foo <- function(z=2) {
z<-3
return(z+2)
}
foo(4)
foo(4)
foo(4)
foo <- function(z=2) {
z<-3
return(z+3)
}
foo(4)
foo(4)
sprintf("The value assigned to z outside the function is %d",z)
z <- 1
sprintf("The value assigned to z outside the function is %d",z)
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
z <- 3
return(z+3)
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
return(z+3)
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
add_two <- function(x) { x+2
}
add_two(-34)
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
foo()
mean(rnorm(sample_size))
typeof(say_hello_to)
mean(rnorm(sample_size))
typeof(say_hello_to)
knitr::opts_chunk$set(echo = TRUE)
# First define the function
calc_sample_mean <- function(sample_size,our_mean=0,our_sd=1) {
rnorm(
mean=our_mean
sd=our_sd, sample_size)
calc_sample_mean(100)
}
}
calc_sample_mean(100)
}
# First define the function
calc_sample_mean <- function(sample_size, our_mean=0, our_sd=1) {
sample <- rnorm(sample_size,
mean = our_mean,
sd = our_sd)
mean(sample)
}
calc_sample_mean(100)
calc_sample_mean(200)
calc_sample_mean(10, our_sd = 2)
calc_sample_mean(10, our_sd = 2)
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
# Run an example from the library
runExample("01_hello")
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
# Run an example from the library
runExample("01_hello")
?renderPlot()
?length.out()
?seq()
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
# Run an example from the library
runExample("01_hello")
?shinyApp()
library(shiny); runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
knitr::opts_chunk$set(echo = TRUE)
![This is my challenge 8!](Home/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/NM2207/Week 8/App-1/www/submit.png)
knitr::opts_chunk$set(echo = TRUE)
(1) What is the topic that you have finalized?
?seq()
styler:::style_selection()
knitr::opts_chunk$set(echo = TRUE)
library(dbplyr)
library(knitr)
library(kableExtra)
data <- data.frame(
Number = c("1","2","3","4"),
Activities = c("Designing the introduction page","Finalised the graphs that I want to use","Designing the landing page", "Designing the logo for my topic")
)
# Create a neater table with kable and kableExtra
kable(data, format = "html", caption = "Description of tasks", booktabs = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
``
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/NM2207/Project")
