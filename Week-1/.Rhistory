setwd("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/NM2207/Week-1")
setwd("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/NM2207/Week-1")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("Quant.png")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Load package tidyverse
library(tidyverse)
# Example a.: execute this example
x <- 'A'
x
x
x
x
x
rm()```
rm(x)```
rm(x)
x
x
x
x
# Load package tidyverse
library(tidyverse)
# Load package tidyverse
library(tidyverse)
# Load package tidyverse
library(tidyverse)
x
# Load package tidyverse
library(tidyverse)
# Load package tidyverse
library(tidyverse)
x
y
y
y
x
setwd("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/NM2207/Week-1")
c
c
c
x
d
d
# Complete the code for Example b and execute it
y <- "apple"
y
# Example a.: execute this example
x <- 'A'
x
# Load package tidyverse
library(tidyverse)
# Load package tidyverse
library(tidyverse)
# Complete the code for Example d and execute it
d <- 5L
d
e
# Complete the code for Example e and execute it
e <- "5"
# Complete the code for Example f and execute it
f <- li
# Complete the code for Example f and execute it
f <- 1i
f
# Example a.: execute this example
x <- 'A'
typeof(x)
# Complete the code for Example b and execute it
typeof(y)
# Complete the code for Example c and execute it
typeof(c)
# Complete the code for Example d and execute it
typeof(d)
# Complete the code for Example e and execute it
typeof(e)
# Complete the code for Example f and execute it
typeof(f)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read("cat-lovers.csv")
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read.csv("cat-lovers.csv")
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read.csv("cat-lovers.csv")
cat_lovers
# Get more information about the mean() command using ? operator
?mean()
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
# Convert the variable number_of_cats using as.integer()
number_of_cats <-as.integer(number_of_cats)
number_of_cats
number_of_cats
# Convert the variable number_of_cats using as.integer()
number_of_cats <-as.integer(number_of_cats)
?as.integer()
?as.integer()
?as.integer()
?mean()
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
# Display the elements of the column number_of_cats
read()
# Display the elements of the column number_of_cats
read(number_of_cats)
# Display the elements of the column number_of_cats
cat_lovers <- read(number_of_cats)
number_of_cats_new
number_of_cats
# Compute the mean of the number of cats: execute this command
mean_age <- mean(cat_lovers$Age)
# Display the elements of the column number_of_cats
cat_lovers <- read(cat_lovers$number_of_cats)
# Display the elements of the column number_of_cats
cat_lovers <- read.csv(cat_lovers$number_of_cats)
# Display the elements of the column number_of_cats
cat_lovers <- read.(cat_lovers$number_of_cats)
# Display the elements of the column number_of_cats
cat_lovers <- read(cat_lovers$number_of_cats)
install.packages("openintro")
library(openintro)
library(tidyverse)
# Empty vector
library(tidyverse)
# Load the package
library(openintro)
# Load package
library(tidyverse)
View(cat_lovers)
cat_lovers$number_of_cats
# Display the elements of the column number_of_cats
as.integer(cat_lovers$number_of_cats)
# Display the elements of the column number_of_cats after converting it using as.numeric()
as.numeric(cat_lovers$number_of_cats)
# Type of the empty vector
typeof(x)
# Empty vector
library(tidyverse)
# Type of the empty vector
typeof(x)
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Display the contents of x
print(x)
knitr::opts_chunk$set(echo = TRUE)
x
x <- c(25,30,22,28,33)
x <- c(25,30,22,28,33)
x <- c('25,30,22,28,33')
x <- c('25','30','22','28','33')
x <- c('25','30','22','28','33')
print(x)
x <- c('25','30','22','28','33')
print(x)
print(student_info)
student_name = c('Alice', 'Bob','Catherine')
student_score = c('85','92','78')
pass_fail = c(TRUE,TRUE,FALSE)
student_info = list(student_name, student_score, pass_fail)
print(student_info)
random_list <- c(10, 15.5, "20", and TRUE)
random_list = c(10, 15.5, "20", and TRUE)
randome_list
random_list
random_list = c(10, 15.5, "20", and TRUE)
random_list = c('10', '15.5', "20", and TRUE)
random_list = c('10', '15.5', '"20"', and TRUE)
random_list = c('10', '15.5', "20",TRUE)
random_list
random_list
typeof(random_list)
random_list_1 <- c(20.5,15,'25')
random_list_1
random_list_1
typeof(random_list_1)
typeof(random_list_new)
random_list_1 <- c(20.5,15,'25')
random_list_new <- as.numeric(random_list_1)
```{r, eval=FALSE,echo=TRUE}
typeof(random_list_new)
character_vector <- c('apple','banana','cherry')
numeric_vector <- c(5,10,15)
character_vector <- c('apple','banana','cherry')
new_vector <- c(numeric_vector,character_vector)
typeof(new_vector)
typeof(vector_new)
vector_new <- c(7,12.5,'15.7')
typeof(vector_new)
vectore_new <- as.numeric(vector_new)
vectore_new <- as.numeric(vector_new)
vector_new <- as.numeric(vector_new)
sum(vector_new)
vector_new <- as.numeric(vector_new)
mean(vector_new)
new_list <- c(numeric_vector,character,logical_vector)
logical_vector<- c(TRUE,FALSE,FALSE)
character_vector <- c('red','green','blue')
numeric_vector <- c(10,20,30)
new_list <- c(numeric_vector,character,logical_vector)
mean(numeric_vector)
Bob <- student_info %>% student_name
Bob <- student_info %>% student_name = "Bob"
student_name = c('Alice', 'Bob','Catherine')
student_score = c('85','92','78')
pass_fail = c(TRUE,TRUE,FALSE)
student_info = list(student_name, student_score, pass_fail)
student_info
ist(name = student_name, score = student_score, pf = pass_fail)
list(name = student_name, score = student_score, pf = pass_fail)
list(student_name, student_score, pass_fail)
student_info[[1]]
student_info[[3]]
student_info[[2]]
student_info[[2]][2]
student_info[[1]]
list(student_name, student_score, pass_fail)
student_info[[1]] == "Bob"
which(student_info[[1]] == "Bob")
student_info[[2]][which(student_info[[1]] == "Bob")]
student_info = list(name = student_name, score = student_score, pf = pass_fail)
student_info[[2]][which(student_info[[1]] == "Bob")]
student_info$score[which(student_info[[1]] == "Bob")]
student_info$score[which(student_info$name == "Bob")]
Bob <- student_info %>% student_name
student_info$score[which(student_info$name == "Bob")]
random_values <- c(1,4,52,3,2)
tail(random_values,n=1)
fruits_vector <- c('apple','banana','cherry','apple')
indexOf(fruits_vector)
age_vector <- c(1,30,21,44,55)
age_vector[age_vector<10]
age_vector[age_vector<=30]
age_vector <- c(1,30,21,44,55)
age_vector[age_vector<=30]
age_vector[age_vector>=30]
numeric_vector <- c(1:20)
print(numeric_vector)
numberic_vector[::3]
numberic_vector[1:20:3]
numeric_vector <- c(1:20)
numeric_vector[1:20:3]
print(numeric_vector)
numeric_vector[1:20:3]
third_element <- numeric_vector[seq(1, length(numeric_vector), 3)]
print(third_element)
numeric_vector(1:10)
numeric_vector<- c(1:10)
numeric_vector<- c(1:10)
print()
print(numeric_vector)
print(numeric_vector)
numeric_vector[4:8]
numeric_vector <- c(10, NA, 15, 20)
sum( is.na(numeric_vector) ) > 0
any_day <- c(30,32,34,90,89,91)
hot_days <- c(anydays>=90)
hot_days <- c(any_day>=90)
print(hot_days)
count(hot_days)
sum(hot_days)
fruits_vector <- c('apple','pear','banana','dragonfruit')
more_six <- character(length > 6)
fruits_vector <- c('apple','pear','banana','dragonfruit')
more_six <- character(length > 6)
more_six <- fruits_vecto[character(length > 6)]
more_six <- fruits_vector[character(length > 6)]
more_six <- fruits_vector[character(length = 6)]
more_six <- fruits_vector[character(length = 6)]
more_six <- fruits_vector[character(length = 6)]
more_six <- c(fruits_vector > nchar(6) )
fruits_vector <- c('apple','pear','banana','dragonfruit')
more_six <- c(fruits_vector > nchar(6) )
?nchar()
more_six <- c(nchar(fruits_vector)>6)
fruits_vector <- c('apple','pear','banana','dragonfruit')
library(stringr)
library(stringr)
library(stringr)
fruits_vector <- c('apple','pear','banana','dragonfruit')
x='bob'
nchar(x)
long_names
long_names <- nchar(fruits) > 6
fruits <- c("apple", "banana", "kiwi", "strawberry", "orange", "pineapple", "grape")
long_names <- nchar(fruits) > 6
long_names
print(long_names)
print(long_names)
long_fruits <- fruits[long_names]
print(long_names)
print(long_names)
print(long_names)
print(long_names)
long_names <- nchar(fruits) > 6
print(long_names)
long_names[4:6]
long_names[4]
fruits[long_names[4]]
print(long_names)
fruits[long_names]
fruits[long_names == TRUE]
fruits[long_names == FALSE]
fruits[long_names == TRUE]
```{r, eval=FALSE,echo=TRUE}
divisible_by_5 <- c(1,5,10,20,22)
divisible_by_5 <- new_vector[new_vector % 5]
divisible_by_5 <- new_vector[new_vector / 5]
new_vector <- c(1,5,10,20,22)
divisible_by_5 <- as.logical(new_vector %% 5 == 0)
new_vector[divisible_by_5]
vector2 <- c(5,6,7,8)
comparison_vector <- vector1>vector2
vector1 <- c(1,2,3,4)
vector1 <- c(1,2,3,4)
vector1 <- c(1,2,3,4)
vector2 <- c(5,6,7,8)
comparison_vector <- vector1>vector2
comparison_vector <- vector1>vector2
comparison_vector <- vector1>vector2
print(comparison_vector)
print(student_info)
print(typeof(random_list))
print(typeof(random_list_new)z)
print(typeof(random_list_new))
print(sum(vector_new))
print(comparison_vector)
new_vector[divisible_by_5]
fruits[long_names == TRUE]
sum(hot_days)
sum( is.na(numeric_vector) ) > 0
numeric_vector[4:8]
```{r, eval=TRUE,echo=TRUE}
print(third_element)
age_vector[age_vector>=30]
fruits_vector <- c('apple','banana','cherry','apple')
tail(random_values,n=1)
student_info$score[which(student_info$name == "Bob")]
mean(numeric_vector)
I will have to make the data type to all numeric first before i continue
## CHECK THE NUMBER OF DECIMAL PLACES
```
## CHECK THE NUMBER OF DECIMAL PLACES
```
## CHECK THE NUMBER OF DECIMAL PLACES##
```
print('Make sure all the values used are in the numeric data type')
print(mean(vector_new))
print('Make sure all the values used are in the numeric data type')
print(mean(vector_new)) &&
print('Make sure all the values used are in the numeric data type')
print(mean(vector_new))
print(mean(vector_new))
tinytex::install_tinytex()
